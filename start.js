#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏...\n');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫–æ–º–∞–Ω–¥–∏
const runCommand = (command, args, cwd, name) => {
    return new Promise((resolve, reject) => {
        const child = spawn(command, args, {
            cwd,
            stdio: 'pipe',
            shell: true
        });

        child.stdout.on('data', (data) => {
            console.log(`[${name}] ${data.toString().trim()}`);
        });

        child.stderr.on('data', (data) => {
            console.error(`[${name}] ${data.toString().trim()}`);
        });

        child.on('close', (code) => {
            if (code !== 0) {
                reject(new Error(`${name} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º ${code}`));
            } else {
                resolve();
            }
        });

        child.on('error', (error) => {
            reject(error);
        });

        return child;
    });
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
const checkFile = (filePath, description) => {
    const fs = require('fs');
    if (!fs.existsSync(filePath)) {
        console.error(`‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${description} (${filePath})`);
        return false;
    }
    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: ${description}`);
    return true;
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...');
const checks = [
    checkFile('backend/package.json', 'Backend package.json'),
    checkFile('backend/.env', 'Backend .env —Ñ–∞–π–ª'),
    checkFile('frontend/package.json', 'Frontend package.json'),
    checkFile('frontend/.env', 'Frontend .env —Ñ–∞–π–ª')
];

if (!checks.every(Boolean)) {
    console.error('\n‚ùå –î–µ—è–∫—ñ —Ñ–∞–π–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É.');
    process.exit(1);
}

console.log('\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–∞');

// –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥—É —Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
async function startServices() {
    try {
        console.log('\nüîß –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥—É...');
        const backend = spawn('npm', ['run', 'dev'], {
            cwd: path.join(__dirname, 'backend'),
            stdio: 'pipe',
            shell: true
        });

        backend.stdout.on('data', (data) => {
            console.log(`[BACKEND] ${data.toString().trim()}`);
        });

        backend.stderr.on('data', (data) => {
            console.error(`[BACKEND] ${data.toString().trim()}`);
        });

        // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏, —â–æ–± –±–µ–∫–µ–Ω–¥ –≤—Å—Ç–∏–≥ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è
        await new Promise(resolve => setTimeout(resolve, 3000));

        console.log('\n‚öõÔ∏è  –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É...');
        const frontend = spawn('npm', ['start'], {
            cwd: path.join(__dirname, 'frontend'),
            stdio: 'pipe',
            shell: true
        });

        frontend.stdout.on('data', (data) => {
            console.log(`[FRONTEND] ${data.toString().trim()}`);
        });

        frontend.stderr.on('data', (data) => {
            console.error(`[FRONTEND] ${data.toString().trim()}`);
        });

        // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        process.on('SIGINT', () => {
            console.log('\nüõë –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤...');
            backend.kill();
            frontend.kill();
            process.exit(0);
        });

        console.log('\nüéâ –°–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ!');
        console.log('üìç Backend: http://localhost:5000');
        console.log('üìç Frontend: http://localhost:3000');
        console.log('\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏');

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error.message);
        process.exit(1);
    }
}

startServices();