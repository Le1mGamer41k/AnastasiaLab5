{"ast":null,"code":"// Сервіс для роботи з API бекенду\n\nimport { auth } from '../config/firebase';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Допоміжна функція для отримання токена авторизації\nconst getAuthToken = async () => {\n  if (auth.currentUser) {\n    return await auth.currentUser.getIdToken();\n  }\n  return null;\n};\n\n// Базова функція для виконання запитів\nconst makeRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  // Налаштування за замовчуванням\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n\n  // Додаємо токен авторизації якщо потрібно\n  if (options.requireAuth !== false) {\n    const token = await getAuthToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || `HTTP error! status: ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\n\n// API для перевірки здоров'я сервера\nexport const checkServerHealth = async () => {\n  return makeRequest('/health', {\n    requireAuth: false\n  });\n};\n\n// API для турів\nexport const toursAPI = {\n  // Отримати всі тури\n  getAll: async (filters = {}) => {\n    const queryParams = new URLSearchParams();\n    if (filters.country) queryParams.append('country', filters.country);\n    if (filters.sortBy) queryParams.append('sortBy', filters.sortBy);\n    if (filters.sortOrder) queryParams.append('sortOrder', filters.sortOrder);\n    const queryString = queryParams.toString();\n    const endpoint = queryString ? `/tours?${queryString}` : '/tours';\n    return makeRequest(endpoint, {\n      requireAuth: false\n    });\n  },\n  // Отримати конкретний тур\n  getById: async tourId => {\n    return makeRequest(`/tours/${tourId}`, {\n      requireAuth: false\n    });\n  }\n};\n\n// API для відгуків\nexport const reviewsAPI = {\n  // Отримати відгуки для туру\n  getForTour: async tourId => {\n    return makeRequest(`/tours/${tourId}/reviews`, {\n      requireAuth: false\n    });\n  },\n  // Додати відгук\n  add: async (tourId, reviewData) => {\n    return makeRequest(`/tours/${tourId}/reviews`, {\n      method: 'POST',\n      body: JSON.stringify(reviewData)\n    });\n  }\n};\n\n// API для бронювань\nexport const bookingsAPI = {\n  // Створити бронювання\n  create: async bookingData => {\n    return makeRequest('/bookings', {\n      method: 'POST',\n      body: JSON.stringify(bookingData)\n    });\n  },\n  // Отримати мої бронювання\n  getMy: async () => {\n    return makeRequest('/my-bookings');\n  }\n};\n\n// API для улюблених\nexport const favoritesAPI = {\n  // Отримати улюблені тури\n  getAll: async () => {\n    return makeRequest('/favorites');\n  },\n  // Додати до улюблених\n  add: async tourId => {\n    return makeRequest('/favorites', {\n      method: 'POST',\n      body: JSON.stringify({\n        tourId\n      })\n    });\n  },\n  // Видалити з улюблених\n  remove: async tourId => {\n    return makeRequest(`/favorites/${tourId}`, {\n      method: 'DELETE'\n    });\n  }\n};\n\n// Експорт усіх API функцій для зручності\nexport default {\n  checkServerHealth,\n  tours: toursAPI,\n  reviews: reviewsAPI,\n  bookings: bookingsAPI,\n  favorites: favoritesAPI\n};","map":{"version":3,"names":["auth","API_BASE_URL","process","env","REACT_APP_API_URL","getAuthToken","currentUser","getIdToken","makeRequest","endpoint","options","url","config","headers","requireAuth","token","Authorization","response","fetch","data","json","ok","Error","error","status","console","checkServerHealth","toursAPI","getAll","filters","queryParams","URLSearchParams","country","append","sortBy","sortOrder","queryString","toString","getById","tourId","reviewsAPI","getForTour","add","reviewData","method","body","JSON","stringify","bookingsAPI","create","bookingData","getMy","favoritesAPI","remove","tours","reviews","bookings","favorites"],"sources":["C:/Users/buhil/WebstormProjects/anastasiaLab/frontend/src/services/apiService.js"],"sourcesContent":["// Сервіс для роботи з API бекенду\r\n\r\nimport { auth } from '../config/firebase';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Допоміжна функція для отримання токена авторизації\r\nconst getAuthToken = async () => {\r\n    if (auth.currentUser) {\r\n        return await auth.currentUser.getIdToken();\r\n    }\r\n    return null;\r\n};\r\n\r\n// Базова функція для виконання запитів\r\nconst makeRequest = async (endpoint, options = {}) => {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n    // Налаштування за замовчуванням\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        },\r\n        ...options\r\n    };\r\n\r\n    // Додаємо токен авторизації якщо потрібно\r\n    if (options.requireAuth !== false) {\r\n        const token = await getAuthToken();\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(url, config);\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n            throw new Error(data.error || `HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(`API request failed: ${endpoint}`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// API для перевірки здоров'я сервера\r\nexport const checkServerHealth = async () => {\r\n    return makeRequest('/health', { requireAuth: false });\r\n};\r\n\r\n// API для турів\r\nexport const toursAPI = {\r\n    // Отримати всі тури\r\n    getAll: async (filters = {}) => {\r\n        const queryParams = new URLSearchParams();\r\n\r\n        if (filters.country) queryParams.append('country', filters.country);\r\n        if (filters.sortBy) queryParams.append('sortBy', filters.sortBy);\r\n        if (filters.sortOrder) queryParams.append('sortOrder', filters.sortOrder);\r\n\r\n        const queryString = queryParams.toString();\r\n        const endpoint = queryString ? `/tours?${queryString}` : '/tours';\r\n\r\n        return makeRequest(endpoint, { requireAuth: false });\r\n    },\r\n\r\n    // Отримати конкретний тур\r\n    getById: async (tourId) => {\r\n        return makeRequest(`/tours/${tourId}`, { requireAuth: false });\r\n    }\r\n};\r\n\r\n// API для відгуків\r\nexport const reviewsAPI = {\r\n    // Отримати відгуки для туру\r\n    getForTour: async (tourId) => {\r\n        return makeRequest(`/tours/${tourId}/reviews`, { requireAuth: false });\r\n    },\r\n\r\n    // Додати відгук\r\n    add: async (tourId, reviewData) => {\r\n        return makeRequest(`/tours/${tourId}/reviews`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(reviewData)\r\n        });\r\n    }\r\n};\r\n\r\n// API для бронювань\r\nexport const bookingsAPI = {\r\n    // Створити бронювання\r\n    create: async (bookingData) => {\r\n        return makeRequest('/bookings', {\r\n            method: 'POST',\r\n            body: JSON.stringify(bookingData)\r\n        });\r\n    },\r\n\r\n    // Отримати мої бронювання\r\n    getMy: async () => {\r\n        return makeRequest('/my-bookings');\r\n    }\r\n};\r\n\r\n// API для улюблених\r\nexport const favoritesAPI = {\r\n    // Отримати улюблені тури\r\n    getAll: async () => {\r\n        return makeRequest('/favorites');\r\n    },\r\n\r\n    // Додати до улюблених\r\n    add: async (tourId) => {\r\n        return makeRequest('/favorites', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ tourId })\r\n        });\r\n    },\r\n\r\n    // Видалити з улюблених\r\n    remove: async (tourId) => {\r\n        return makeRequest(`/favorites/${tourId}`, {\r\n            method: 'DELETE'\r\n        });\r\n    }\r\n};\r\n\r\n// Експорт усіх API функцій для зручності\r\nexport default {\r\n    checkServerHealth,\r\n    tours: toursAPI,\r\n    reviews: reviewsAPI,\r\n    bookings: bookingsAPI,\r\n    favorites: favoritesAPI\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}